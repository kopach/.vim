" Load vim-plug plugin manager if not yet installed
if empty(glob("~/.vim/autoload/plug.vim"))
	execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')
" Plugins go here

" Define bundles via Github repos
				"Plugin manager
Plug 'VundleVim/Vundle.vim'
				"File tree
Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
				" Open non text files from nerdtree with an appropriate application.
Plug 'aufgang001/vim-nerdtree_plugin_open', { 'on':  'NERDTreeToggle' }
				"A plugin for NERDTree showing git status flags
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' }
				"Status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
				"Useful commenting
Plug 'tomtom/tcomment_vim'
				"Git features
Plug 'tpope/vim-fugitive'
				"Syntax checking plugin / also style checking
function! InstallSyntasticDeps(info)
	if a:info.status == 'installed' || a:info.force
		" Fast version of eslint (ulses local eslint by default if provided)
		!npm install -g eslint_d
	endif
endfunction
Plug 'scrooloose/syntastic', { 'do': function('InstallSyntasticDeps') }

Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0

				" Shows a git diff in the 'gutter' (sign column)
Plug 'airblade/vim-gitgutter'

" Tabs
Plug 'fweep/vim-tabber'
set tabline=%!tabber#TabLine()
let g:tabber_filename_style = 'filename'

nnoremap <silent> <Space><Space>   :TabberSelectLastActive<CR>
nnoremap <silent> <Leader>tn       :tabnew<CR>
nnoremap <silent> <Leader>tl       :TabberShiftLeft<CR>
nnoremap <silent> <Leader>tr       :TabberShiftRight<CR>
nnoremap <silent> <Leader>1        :tabnext 1<CR>
nnoremap <silent> <Leader>2        :tabnext 2<CR>
nnoremap <silent> <Leader>3        :tabnext 3<CR>
nnoremap <silent> <Leader>4        :tabnext 4<CR>
nnoremap <silent> <Leader>5        :tabnext 5<CR>
nnoremap <silent> <Leader>6        :tabnext 6<CR>
nnoremap <silent> <Leader>7        :tabnext 7<CR>
nnoremap <silent> <Leader>8        :tabnext 8<CR>
nnoremap <silent> <Leader>9        :tabnext 9<CR>

				" Provides useful mappings which allow to move between Vim panes and tmux splits seamlessly
Plug 'christoomey/vim-tmux-navigator'
				" Base 16 color themes
Plug 'chriskempson/base16-vim'
				" Another color scheme
Plug 'mhartington/oceanic-next'
Plug 'altercation/vim-colors-solarized'

				" tmux integration for vim
Plug 'benmills/vimux'
				" JavaScript Syntax highlighting with ES6 support
Plug 'pangloss/vim-javascript'
				" HTML5 omnicomplete and syntax
Plug 'othree/html5.vim'
				" The most advanced TypeScript Syntax Highlighting
Plug 'HerringtonDarkholme/yats.vim'

" TypeScript Syntax highlightinG
" Plug 'leafgarland/typescript-vim'

" JSX Syntax highlightinG
Plug 'mxw/vim-jsx'

				" a Vim Plugin for angular-cli
Plug 'bdauria/angular-cli.vim'

" Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-repeat'
Plug 'vim-scripts/visualrepeat'
				" Adds ability to surrond anything by quotes or tags
Plug 'tpope/vim-surround'

" Plug 'rking/ag.vim'
				" Text formatter
Plug 'terryma/vim-multiple-cursors'

				" Easy navigate through document
Plug 'easymotion/vim-easymotion'

" smooth scrolling
Plug 'yuttie/comfortable-motion.vim'

" 
Plug 'mhinz/vim-startify'

				" Markdown previews from VIm!
Plug 'shime/vim-livedown'

				" Allows convert text into different cases (Coercion): camelCase, snake_case, etc
				" also allows to create abbreviations
Plug 'tpope/vim-abolish'

				" Allows to use .editorconfig
Plug 'editorconfig/editorconfig-vim'

				" Snippents list for snipmate or ultisnips
Plug 'honza/vim-snippets'
				" Snippents engine, works fine with youcompleteme
Plug 'SirVer/ultisnips'

				" Displaying thin vertical lines at each indentation level for code indented with spaces
Plug 'Yggdroot/indentLine'

				" JSDoc generator
Plug 'heavenshell/vim-jsdoc'
				" Browse the tags of the current file and get an overview of its structure
" Plug 'majutsushi/tagbar'

				" JavaScript parser (needed for tagbar)
" function! BuildTern(info)
"   if a:info.status == 'installed' || a:info.force
"     !npm install
"   endif
" endfunction
" Plug 'marijnh/tern_for_vim', { 'do': function('BuildTern') }
" Plug 'ternjs/tern_for_vim'

				" A code-completion engine for Vim
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --system-libclang --omnisharp-completer' }

" Youcompleteme setup for typescipt
if !exists("g:ycm_semantic_triggers")
	let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

				" Zoom in/out of windows/splits
Plug 'regedarek/ZoomWin'

				" Vue.js syntax
Plug 'posva/vim-vue'

				" Search and replace a pattern across multiple files interactively
Plug 'brooth/far.vim'

				" A parser for a condensed HTML format, simmilar to zen codding
				" (Ctrl+E in insert mode)
Plug 'rstacruz/sparkup'

				"Vim undo tree visualizer
Plug 'simnalamburt/vim-mundo'
nnoremap <F5> :MundoToggle<CR>
let g:mundo_preview_bottom = 1
let g:mundo_width = 25

				" Enable sparkup in JSX files:
autocmd FileType javascript.jsx runtime! ftplugin/html/sparkup.vim

				" Adds filetype glyphs (icons)
Plug 'ryanoasis/vim-devicons'
set guifont=DroidSansMono_Nerd_Font:h11
let g:airline_powerline_fonts = 1

				" Autocomplete for emoji by <C-X><C-E> in insert mode
Plug 'kyuhi/vim-emoji-complete'

				" A Vim plugin for TypeScript
Plug 'Quramy/tsuquyomi'
				" Quramy/tsuquyomi's dependency
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" angular-cli config
" Initialize plugin if @angular available in project
autocmd VimEnter * if globpath('.,..','node_modules/@angular') != '' | call angular_cli#init() | endif

" VimVue config
" autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css

" EasyClip settings
" adds mew motion with `s` key to substitute text instead of select and paste
let g:EasyClipUseSubstituteDefaults = 1
" automatically format after paset - e.g when move from different indent level
let g:EasyClipAutoFormat = 1
" CTRL-V for Paste (INSERT MODE)
imap <c-v> <plug>EasyClipInsertModePaste

" EasyMotion settings
map <Leader> <Plug>(easymotion-prefix)

" ZoomWin config
nmap <F11> :ZoomWin<CR>

" Youcompleteme settings
" suggests completion by Alt+Space
let g:ycm_key_invoke_completion = '<A-Space>'
" close Preview window after exit insert mode
let g:ycm_autoclose_preview_window_after_insertion = 1

" Tagbar config
nmap <F12> :TagbarToggle<CR>
" Tagbar css+scss config
let g:tagbar_type_css = {
\ 'ctagstype' : 'css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }
let g:tagbar_type_scss = g:tagbar_type_css

" JSDoc settings
map <Leader>js :JsDoc<CR><CR>
" Allow prompt for interactive input.
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
" let g:jsdoc_additional_descriptions = 1
" let g:jsdoc_access_descriptions = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_enable_es6 = 1

"Markdown settings
autocmd BufNewFile,BufReadPost *.ngdoc set filetype=markdown
" let vim_markdown_preview_hotkey='<C-m>'
nmap gm :LivedownToggle<CR>
"
" should markdown preview get shown automatically upon opening markdown buffer
let g:livedown_autorun = 0

" should the browser window pop-up upon previewing
let g:livedown_open = 1

" the port on which Livedown server will run
let g:livedown_port = 1337

" the system command to launch a browser (ex. on linux)
" let g:livedown_browser = firefox

" the system command to launch a browser (ex. on OSX)
let g:livedown_browser = "chromium"

"For matching tags and more with % key
Plug 'vim-scripts/matchit.zip'

"For tags highlighting
Plug 'Valloric/MatchTagAlways'

" Enables foldings with better visual presentation for any files automatically
Plug 'kopach/vim-anyfold', { 'branch': 'foldmethod' }
" Plug 'pseewald/vim-anyfold'
" Easy fod/unfold with Enter or Backspace
Plug 'arecarn/vim-fold-cycle'

" Simplified clipboard functionality for Vim
Plug 'svermeulen/vim-easyclip'

" Edit every line in a quickfix list at the same time
Plug 'Olical/vim-enmasse'

" Super fast fuzzy finder
" this will install fzf and will make fzf work with history: https://github.com/junegunn/fzf.vim/issues/290#issuecomment-303076880
let g:fzf_install = './install --all && if [ -z ${FZF_DEFAULT_OPTS+x} ]; then echo "export FZF_DEFAULT_OPTS=\"--history=$HOME/.fzf_history\"" >> ~/.zshrc; fi'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': g:fzf_install }
Plug 'junegunn/fzf.vim', { 'do': 'brew install ripgrep' }

" Initialize plugin system
call plug#end()

" =====================================
"  FZF
"  https://github.com/dkarter/dotfiles/blob/master/vimrc
" =====================================
" set fzf's default input to ripgrep instead of find. This also removes gitignore etc
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden'
let g:fzf_files_options = '--preview "head -100 {}"'
" let g:fzf_files_options = '--preview "rougify {} | head -'.&lines.'"'

function! FZFOpen(command_str)
	if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
		exe "normal! \<c-w>\<c-w>"
	endif
	exe 'normal! ' . a:command_str . "\<cr>"
endfunction

fun! FzfOmniFiles()
	let is_git = system('git status')
	if v:shell_error
		:call FZFOpen(':Files')
	else
		:call FZFOpen(':GitFiles')
	endif
endfun

nnoremap <silent> <C-p> :call FzfOmniFiles()<CR>



" Anyfold settings (folding)
let anyfold_activate=1
set foldlevel=99 " set very high fold lever, thus - disable folding once open file

"SnipMate settings
" Enable snippets from custom-snippets/UltiSnips/
autocmd FileType javascript UltiSnipsAddFiletypes es6-jasmine
" Tell UltiSnips whe to find custom snippets
set runtimepath+=~/.vim/custom-snippets

" Toggle NERDTree
map <F10> :NERDTreeToggle<CR>
" Current file in NERDTree
map <F9> :NERDTreeFind<CR>

" Syntastic
let g:syntastic_javascript_checkers = ['eslint'] "['jshint', 'jscs']
let g:syntastic_javascript_eslint_exec = 'eslint_d' " enable eslint_d for faster checking

let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_less_checkers = ['lessc']
let g:syntastic_css_checkers = ['csslint']
"Recommended settings https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L122
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1 "Auto open list of errors in separate split
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Intergare TypeScript checking with syntastic
" let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi', 'tslint'] " You shouldn't use 'tsc' checker.

" Vimux settings
"nmap <leader>nrs :call VimuxRunCommand('npm run serve')<cr>
"nmap <leader>nrsm :call VimuxRunCommand('npm run serve:mock')<cr>
"nmap <leader>nt :call VimuxRunCommand('npm run tdd')<cr>
"nmap <leader>nrb :call VimuxRunCommand('npm run build')<cr>
 
 " Prompt for a command to run
 "map <Leader>vp :VimuxPromptCommand<CR>

 " Run last command executed by VimuxRunCommand
"nmap <Leader>vl :VimuxRunLastCommand<CR>

" Multiple cursors
let g:multi_cursor_use_default_mapping = 0 " Disable default keys mapping
" New mapping
let g:multi_cursor_start_key='<F6>'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<C-w>'

" " The Silver Searcher (Ag)
" if executable('ag')
"   " Use ag over grep
"   set grepprg=ag\ --nogroup\ --nocolor
"
"   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"   let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"
"   " ag is fast enough that CtrlP doesn't need to cache
"   let g:ctrlp_use_caching = 0
" endif
"
" " Search word under cursor
nnoremap K :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>
"
" " Open search dialog
map <F3> :Ag<CR>
"
"

" Configure NerdtreepluginOpen
" let g:nerdtree_plugin_open_cmd = 'gnome-open'
let g:nerdtree_plugin_open_cmd = 'open'

"Move the tab to the left
" map <C-H> :execute "tabmove" tabpagenr() - 2 <CR>
"Move the tab to the right
" map <C-L> :execute "tabmove" tabpagenr() <CR>

autocmd BufRead,BufNewFile *.less set filetype=less " it is need for Syntastic ( try :SyntasticInfo )
autocmd BufRead,BufNewFile *.less set syntax=css "  enable css syntax in *.less files
autocmd BufRead,BufNewFile *.scss set filetype=scss " it is need for Syntastic ( try :SyntasticInfo )


" Highlight words under the cursor like many IDEs
" autocmd CursorMoved * silent! exe printf('match IncSearch /\<%s\>/', expand('<cword>'))

