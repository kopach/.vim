filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Define bundles via Github repos
				"Plugin manager
Bundle 'VundleVim/Vundle.vim'
				"File tree
Bundle 'scrooloose/nerdtree'
				"Status line
Bundle 'bling/vim-airline'
				"Useful commenting
Bundle 'tomtom/tcomment_vim'
				"Git features
Bundle 'tpope/vim-fugitive'
				"Syntax checking plugin / also style checking
Bundle 'scrooloose/syntastic'
				" Open non text files from nerdtree with an appropriate application.
Bundle 'aufgang001/vim-nerdtree_plugin_open'
Bundle 'kien/ctrlp.vim'
Bundle 'repeat.vim'
Bundle 'visualrepeat'
Bundle 'surround.vim'
Bundle 'rking/ag.vim'
				" Color schemes
Bundle 'Lokaltog/vim-distinguished'

"CtrlP settings
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"For matching tags and more with % key
Bundle 'matchit.zip'

"For tags highlighting
Bundle 'Valloric/MatchTagAlways'

call vundle#end()            " required
filetype plugin indent on    " required

" Toggle NERDTree
map <F10> :NERDTreeToggle<CR>
" Current file in NERDTree
map <F9> :NERDTreeFind<CR>

" Syntastic
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_less_checkers = ['lessc']
let g:syntastic_css_checkers = ['csslint']
"Recommended settings https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L122
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1 "Auto open list of errors in separate split
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" The Silver Searcher (Ag)
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Search word under cursor
nnoremap K :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>
" Open search dialog
map <F3> :Ag! 

" Configure NerdtreePluginOpen
let g:nerdtree_plugin_open_cmd = 'gnome-open'

"Move the tab to the left
" map <C-H> :execute "tabmove" tabpagenr() - 2 <CR>
"Move the tab to the right
" map <C-L> :execute "tabmove" tabpagenr() <CR>

autocmd BufRead,BufNewFile *.less set filetype=less " it is need for Syntastic ( try :SyntasticInfo )
autocmd BufRead,BufNewFile *.less set syntax=css "  enable css syntax in *.less files

" Rename tabs to show tab number
set tabline=%!MyTabLine()
function MyTabLine()
  let s = '' " complete tabline goes here
  " loop through each tab page
  for t in range(tabpagenr('$'))
    " select the highlighting for the buffer names
    if t + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif
    " empty space
    let s .= ' '
    " set the tab page number (for mouse clicks)
    let s .= '%' . (t + 1) . 'T'
    " set page number string
    let s .= t + 1 . ' '
    " get buffer names and statuses
    let n = ''  "temp string for buffer names while we loop and check buftype
    let m = 0 " &modified counter
    let bc = len(tabpagebuflist(t + 1))  "counter to avoid last ' '
    " loop through each buffer in a tab
    for b in tabpagebuflist(t + 1)
      " buffer types: quickfix gets a [Q], help gets [H]{base fname}
      " others get 1dir/2dir/3dir/fname shortened to 1/2/3/fname
      if getbufvar( b, "&buftype" ) == 'help'
        let n .= '[H]' . fnamemodify( bufname(b), ':t:s/.txt$//' )
      elseif getbufvar( b, "&buftype" ) == 'quickfix'
        let n .= '[Q]'
      else
        let n .= pathshorten(bufname(b))
        "let n .= bufname(b)
      endif
      " check and ++ tab's &modified count
      if getbufvar( b, "&modified" )
        let m += 1
      endif
      " no final ' ' added...formatting looks better done later
      if bc > 1
        let n .= ' '
      endif
      let bc -= 1
    endfor
    " add modified label [n+] where n pages in tab are modified
    if m > 0
      "let s .= '[' . m . '+]'
      let s.= '+ '
    endif
    " add buffer names
    if n == ''
      let s .= '[No Name]'
    else
      let s .= n
    endif
    " switch to no underlining and add final space to buffer list
    "let s .= '%#TabLineSel#' . ' '
    let s .= ' '
  endfor
  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'
  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999XX'
  endif
  return s
endfunction


" TODO: investigate this
" neocomplete.vim
" vim-autoformat
" vim-easy-align
" vim-gitgutter
" vim-json
